{
  "title": "BrainF*ck Compiler",
  "description": "Mini-compiler written in 1998",
  "language": "nasm",
  "source": "https://github.com/libertas/bf.asm/blob/master/bf.asm",
  "slug": "bf",
  "mode": "files",
  "tokens": [
    [
      {
        "type": "meta",
        "content": "{\"title\":\"BrainF*ck Compiler\",\"description\":\"Mini-compiler written in 1998\",\"language\":\"nasm\",\"source\":\"https://github.com/libertas/bf.asm/blob/master/bf.asm\",\"slug\":\"bf\",\"mode\":\"files\"}",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; bf.asm: Copyright (C) 1999 Brian Raiter <breadbox@muppetlabs.com>:",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; Licensed under the terms of the GNU General Public License, either",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; version 2 or (at your option) any later version.",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "comment",
        "content": ";; To build:",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; nasm -f bin -o bf bf.asm && chmod +x bf",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; To use:",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; bf < foo.b > foo && chmod +x foo",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "keyword",
        "content": "BITS",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "keyword",
        "content": "32",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [],
    [
      {
        "type": "comment",
        "content": ";; This is the size of the data area supplied to compiled programs.",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "operator",
        "content": "%",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": "define",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "plain",
        "content": "arraysize",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "number",
        "content": "30000",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [],
    [
      {
        "type": "comment",
        "content": ";; For the compiler, the text segment is also the data segment. The",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; memory image of the compiler is inside the code buffer, and is",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; modified in place to become the memory image of the compiled",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; program. The area of memory that is the data segment for compiled",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; programs is not used by the compiler. The text and data segments of",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; compiled programs are really only different areas in a single",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; segment, from the system's point of view. Both the compiler and",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; compiled programs load the entire file contents into a single",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; memory segment which is both writeable and executable.",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "operator",
        "content": "%",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": "define",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "plain",
        "content": "TEXTORG",
        "wlength": 1
      },
      {
        "type": "space",
        "content": "\t\t"
      },
      {
        "type": "number",
        "content": "0x45E9B000",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "operator",
        "content": "%",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": "define",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "plain",
        "content": "DATAOFFSET",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " \t"
      },
      {
        "type": "number",
        "content": "0x2000",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "operator",
        "content": "%",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": "define",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "plain",
        "content": "DATAORG",
        "wlength": 1
      },
      {
        "type": "space",
        "content": "  \t"
      },
      {
        "type": "plain",
        "content": "(TEXTORG",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "operator",
        "content": "+",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "plain",
        "content": "DATAOFFSET)",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [],
    [
      {
        "type": "comment",
        "content": ";; Here begins the file image.",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "plain",
        "content": "org",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "plain",
        "content": "TEXTORG",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [],
    [
      {
        "type": "comment",
        "content": ";; At the beginning of the text segment is the ELF header and the",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; program header table, the latter consisting of a single entry. The",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; two structures overlap for a space of eight bytes. Nearly all",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; unused fields in the structures are used to hold bits of code.",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "comment",
        "content": ";; The beginning of the ELF header.",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "plain",
        "content": "db",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "number",
        "content": "0x7F",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": ",",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "string",
        "content": "\"ELF\"",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "space",
        "content": "\t\t\t\t",
        "skip": true
      },
      {
        "type": "comment",
        "content": "; ehdr.e_ident",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "comment",
        "content": ";; The top(s) of the main compiling loop. The loop jumps back to",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; different positions, depending on how many bytes to copy into the",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; code buffer. After doing that, esi is initialized to point to the",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; epilog code chunk, a copy of edi (the pointer to the end of the",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; code buffer) is saved in ebp, the high bytes of eax are reset to",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; zero (via the exchange with ebx), and then the next character of",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; input is retrieved.",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "label",
        "content": "emitputchar:",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "add",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "esi",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": ",",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "plain",
        "content": "byte",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "plain",
        "content": "(putchar",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "operator",
        "content": "-",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "plain",
        "content": "decchar)",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "operator",
        "content": "-",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "number",
        "content": "4",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [],
    [
      {
        "type": "label",
        "content": "emitgetchar:",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "lodsd",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [],
    [
      {
        "type": "label",
        "content": "emit6bytes:",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "movsd",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [],
    [
      {
        "type": "label",
        "content": "emit2bytes:",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "movsb",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [],
    [
      {
        "type": "label",
        "content": "emit1byte:",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "movsb",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [],
    [
      {
        "type": "label",
        "content": "compile:",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "lea",
        "wlength": 1
      },
      {
        "type": "space",
        "content": "  "
      },
      {
        "type": "register",
        "content": "esi",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": ",",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "operator",
        "content": "[",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": "byte",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "ecx",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "operator",
        "content": "+",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "plain",
        "content": "epilog",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "operator",
        "content": "-",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "plain",
        "content": "filesize",
        "wlength": 2
      },
      {
        "type": "operator",
        "content": "]",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "xchg",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "eax",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": ",",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "ebx",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "cmp",
        "wlength": 1
      },
      {
        "type": "space",
        "content": "  "
      },
      {
        "type": "register",
        "content": "eax",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": ",",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "number",
        "content": "0x00030002",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "comment",
        "content": "; ehdr.e_type (0x0002), ehdr.e_machine (0x0003)",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "mov",
        "wlength": 1
      },
      {
        "type": "space",
        "content": "  "
      },
      {
        "type": "register",
        "content": "ebp",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": ",",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "edi",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "space",
        "content": "\t\t\t",
        "skip": true
      },
      {
        "type": "comment",
        "content": "; ehdr.e_version",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "jmp",
        "wlength": 1
      },
      {
        "type": "space",
        "content": "  "
      },
      {
        "type": "plain",
        "content": "short",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "plain",
        "content": "getchar",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; The entry point for the compiler (and compiled programs), and the",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; location of the program header table.",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "dd",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "plain",
        "content": "_start",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "space",
        "content": "\t\t\t\t",
        "skip": true
      },
      {
        "type": "comment",
        "content": "; ehdr.e_entry",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "dd",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "plain",
        "content": "proghdr",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "operator",
        "content": "-",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "operator",
        "content": "$",
        "wlength": 2
      },
      {
        "type": "operator",
        "content": "$",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "space",
        "content": "\t\t\t",
        "skip": true
      },
      {
        "type": "comment",
        "content": "; ehdr.e_phoff",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; The last routine of the compiler, called when there is no more",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; input. The epilog code chunk is copied into the code buffer. The",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; text origin is popped off the stack into ecx, and subtracted from",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; edi to determine the size of the compiled program. This value is",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; stored in the program header table, and then is moved into edx.",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; The program then jumps to the putchar routine, which sends the",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; compiled program to stdout before falling through to the epilog",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; routine and exiting.",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "label",
        "content": "eof:",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "movsd",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "space",
        "content": " \t\t\t\t\t",
        "skip": true
      },
      {
        "type": "comment",
        "content": "; ehdr.e_shoff",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "xchg",
        "wlength": 1
      },
      {
        "type": "space",
        "content": "  "
      },
      {
        "type": "register",
        "content": "eax",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": ",",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "ecx",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "pop",
        "wlength": 1
      },
      {
        "type": "space",
        "content": "   "
      },
      {
        "type": "register",
        "content": "ecx",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "sub",
        "wlength": 1
      },
      {
        "type": "space",
        "content": "   "
      },
      {
        "type": "register",
        "content": "edi",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": ",",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "ecx",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "space",
        "content": "\t\t\t",
        "skip": true
      },
      {
        "type": "comment",
        "content": "; ehdr.e_flags",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "xchg",
        "wlength": 1
      },
      {
        "type": "space",
        "content": "  "
      },
      {
        "type": "register",
        "content": "eax",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": ",",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "edi",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "stosd",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "xchg",
        "wlength": 1
      },
      {
        "type": "space",
        "content": "  "
      },
      {
        "type": "register",
        "content": "eax",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": ",",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "edx",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "jmp",
        "wlength": 1
      },
      {
        "type": "space",
        "content": "   "
      },
      {
        "type": "plain",
        "content": "short",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "plain",
        "content": "putchar",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "space",
        "content": "\t\t",
        "skip": true
      },
      {
        "type": "comment",
        "content": "; ehdr.e_ehsize",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; 0x20 == the size of one program header table entry.",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "dw",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "number",
        "content": "0x20",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "space",
        "content": "\t\t\t\t\t",
        "skip": true
      },
      {
        "type": "comment",
        "content": "; ehdr.e_phentsize",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "comment",
        "content": ";; The beginning of the program header table. 1 == PT_LOAD, indicating",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; that the segment is to be loaded into memory.",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "label",
        "content": "proghdr:",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "dd",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "number",
        "content": "1",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "space",
        "content": "\t\t\t\t\t",
        "skip": true
      },
      {
        "type": "comment",
        "content": "; ehdr.e_phnum & phdr.p_type, ehdr.e_shentsize",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "dd",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "number",
        "content": "0",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "space",
        "content": "\t\t\t\t\t",
        "skip": true
      },
      {
        "type": "comment",
        "content": "; ehdr.e_shnum & phdr.p_offset, ehdr.e_shstrndx",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; (Note that the next four bytes, in addition to containing the first",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; two instructions of the bracket routine, also comprise the memory",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; address of the text origin.)",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "db",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "number",
        "content": "0",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "space",
        "content": "\t\t\t\t\t",
        "skip": true
      },
      {
        "type": "comment",
        "content": "; phdr.p_vaddr",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "comment",
        "content": ";; The bracket routine emits code for the \"[\" instruction. This",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; instruction translates to a simple \"jmp near\", but the target of",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; the jump will not be known until the matching \"]\" is seen. The",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; routine thus outputs a random target, and pushes the location of",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; the target in the code buffer onto the stack.",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "label",
        "content": "bracket:",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "mov",
        "wlength": 1
      },
      {
        "type": "space",
        "content": "  "
      },
      {
        "type": "register",
        "content": "al",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": ",",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "number",
        "content": "0xE9",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "inc",
        "wlength": 1
      },
      {
        "type": "space",
        "content": "  "
      },
      {
        "type": "register",
        "content": "ebp",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "push",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "ebp",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "space",
        "content": "\t\t\t\t",
        "skip": true
      },
      {
        "type": "comment",
        "content": "; phdr.p_paddr",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "stosd",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "jmp",
        "wlength": 1
      },
      {
        "type": "space",
        "content": "  "
      },
      {
        "type": "plain",
        "content": "short",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "plain",
        "content": "emit1byte",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; This is where the size of the executable file is stored in the",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; program header table. The compiler updates this value just before",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; it outputs the compiled program. This is the only field in the two",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; headers that differs between the compiler and its compiled",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; programs. (While the compiler is reading input, the first byte of",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; this field is also used as an input buffer.)",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "label",
        "content": "filesize:",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "dd",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "plain",
        "content": "compilersize",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "space",
        "content": "\t\t\t",
        "skip": true
      },
      {
        "type": "comment",
        "content": "; phdr.p_filesz",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; The size of the program in memory. This entry creates an area of",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; bytes, arraysize in size, all initialized to zero, starting at",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; DATAORG.",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "dd",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "plain",
        "content": "DATAOFFSET",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "operator",
        "content": "+",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "plain",
        "content": "arraysize",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "comment",
        "content": "; phdr.p_memsz",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; The code chunk for the \".\" instruction. eax is set to 4 to invoke",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; the write system call. ebx, the file handle to write to, is set to",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; 1 for stdout. ecx points to the buffer containing the bytes to",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; output, and edx equals the number of bytes to output. (Note that",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; the first byte of the first instruction, which is also the least",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; significant byte of the p_flags field, encodes to 0xB3. Having the",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; 2-bit set marks the memory containing the compiler, and its",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; compiled programs, as writeable.)",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "label",
        "content": "putchar:",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "mov",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "bl",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": ",",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "number",
        "content": "1",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "space",
        "content": "\t\t\t\t",
        "skip": true
      },
      {
        "type": "comment",
        "content": "; phdr.p_flags",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "mov",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "al",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": ",",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "number",
        "content": "4",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "int",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "number",
        "content": "0x80",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "space",
        "content": "\t\t\t\t",
        "skip": true
      },
      {
        "type": "comment",
        "content": "; phdr.p_align",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; The epilog code chunk. After restoring the initialized registers",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; eax and ebx are both zero. eax is incremented to 1, so as to invoke",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; the exit system call. ebx specifies the process's return value.",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "label",
        "content": "epilog:",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "popa",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "inc",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "eax",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "int",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "number",
        "content": "0x80",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; The code chunks for the \">\", \"<\", \"+\", and \"-\" instructions.",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "label",
        "content": "incptr:",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "inc",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "ecx",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [],
    [
      {
        "type": "label",
        "content": "decptr:",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "dec",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "ecx",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [],
    [
      {
        "type": "label",
        "content": "incchar:",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "inc",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "plain",
        "content": "byte",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "operator",
        "content": "[",
        "wlength": 3
      },
      {
        "type": "register",
        "content": "ecx",
        "wlength": 2
      },
      {
        "type": "operator",
        "content": "]",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [],
    [
      {
        "type": "label",
        "content": "decchar:",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "dec",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "plain",
        "content": "byte",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "operator",
        "content": "[",
        "wlength": 3
      },
      {
        "type": "register",
        "content": "ecx",
        "wlength": 2
      },
      {
        "type": "operator",
        "content": "]",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; The main loop of the compiler continues here, by obtaining the next",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; character of input. This is also the code chunk for the \",\"",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; instruction. eax is set to 3 to invoke the read system call. ebx",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; the file handle to read from, is set to 0 for stdin. ecx points to",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; a buffer to receive the bytes that are read, and edx equals the",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; number of bytes to read.",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "label",
        "content": "getchar:",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "mov",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "al",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": ",",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "number",
        "content": "3",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "xor",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "ebx",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": ",",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "ebx",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "int",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "number",
        "content": "0x80",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; If eax is zero or negative, then there is no more input, and the",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; compiler proceeds to the eof routine.",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "or",
        "wlength": 1
      },
      {
        "type": "space",
        "content": "  "
      },
      {
        "type": "register",
        "content": "eax",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": ",",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "eax",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "jle",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "plain",
        "content": "eof",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; Otherwise, esi is advanced four bytes (from the epilog code chunk",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; to the incptr code chunk), and the character read from the input is",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; stored in al, with the high bytes of eax reset to zero.",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "lodsd",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "mov",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "eax",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": ",",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "operator",
        "content": "[",
        "wlength": 3
      },
      {
        "type": "register",
        "content": "ecx",
        "wlength": 2
      },
      {
        "type": "operator",
        "content": "]",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; The compiler compares the input character with \">\" and \"<\". esi is",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; advanced to the next code chunk with each failed test.",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "cmp",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "al",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": ",",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "string",
        "content": "'>'",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "jz",
        "wlength": 1
      },
      {
        "type": "space",
        "content": "  "
      },
      {
        "type": "plain",
        "content": "emit1byte",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "inc",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "esi",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "cmp",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "al",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": ",",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "string",
        "content": "'<'",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "jz",
        "wlength": 1
      },
      {
        "type": "space",
        "content": "  "
      },
      {
        "type": "plain",
        "content": "emit1byte",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "inc",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "esi",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; The next four tests check for the characters \"+\", \",\", \"-\", and",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; \".\", respectively. These four characters are contiguous in ASCII",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; and so are tested for by doing successive decrements of eax.",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "sub",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "al",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": ",",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "string",
        "content": "'+'",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "jz",
        "wlength": 1
      },
      {
        "type": "space",
        "content": "  "
      },
      {
        "type": "plain",
        "content": "emit2bytes",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "dec",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "eax",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "jz",
        "wlength": 1
      },
      {
        "type": "space",
        "content": "  "
      },
      {
        "type": "plain",
        "content": "emitgetchar",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "inc",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "esi",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "inc",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "esi",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "dec",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "eax",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "jz",
        "wlength": 1
      },
      {
        "type": "space",
        "content": "  "
      },
      {
        "type": "plain",
        "content": "emit2bytes",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "dec",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "eax",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "jz",
        "wlength": 1
      },
      {
        "type": "space",
        "content": "  "
      },
      {
        "type": "plain",
        "content": "emitputchar",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; The remaining instructions, \"[\" and \"]\", have special routines for",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; emitting the proper code. (Note that the jump back to the main loop",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; is at the edge of the short-jump range. Routines below here",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; therefore use this jump as a relay to return to the main loop",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; however, in order to use it correctly, the routines must be sure",
        "skip": true
      }
    ],
    [
      {
        "type": "space",
        "content": "\t"
      },
      {
        "type": "newline",
        "content": "↵"
      },
      {
        "type": "comment",
        "content": ";; that the zero flag is cleared at the time.)",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "cmp",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "al",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": ",",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "string",
        "content": "'['",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "operator",
        "content": "-",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "string",
        "content": "'.'",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "jz",
        "wlength": 1
      },
      {
        "type": "space",
        "content": "  "
      },
      {
        "type": "plain",
        "content": "bracket",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "cmp",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "al",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": ",",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "string",
        "content": "']'",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "operator",
        "content": "-",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "string",
        "content": "'.'",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [],
    [
      {
        "type": "label",
        "content": "relay:",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "jnz",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "plain",
        "content": "compile",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [],
    [
      {
        "type": "comment",
        "content": ";; The endbracket routine emits code for the \"]\" instruction, as well",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; as completing the code for the matching \"[\". The compiler first",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; emits \"cmp dh, [ecx]\" and the first two bytes of a \"jnz near\". The",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; location of the missing target in the code for the \"[\" instruction",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; is then retrieved from the stack, the correct target value is",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; computed and stored, and then the current instruction's jmp target",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; is computed and emitted.",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "label",
        "content": "endbracket:",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "mov",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "eax",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": ",",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "number",
        "content": "0x850F313A",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "stosd",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "lea",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "esi",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": ",",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "operator",
        "content": "[",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": "byte",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "edi",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "operator",
        "content": "-",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "number",
        "content": "8",
        "wlength": 2
      },
      {
        "type": "operator",
        "content": "]",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "pop",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "eax",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "sub",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "esi",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": ",",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "eax",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "mov",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "operator",
        "content": "[",
        "wlength": 4
      },
      {
        "type": "register",
        "content": "eax",
        "wlength": 3
      },
      {
        "type": "operator",
        "content": "]",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": ",",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "esi",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "sub",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "eax",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": ",",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "edi",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "stosd",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "jmp",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "plain",
        "content": "short",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "plain",
        "content": "relay",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [],
    [
      {
        "type": "comment",
        "content": ";; This is the entry point, for both the compiler and its compiled",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; programs. The shared initialization code sets ecx to the beginning",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; of the array that is the compiled program's data area, and edx to",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; one. (This also clears the zero flag for the relay jump below.) The",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; registers are then saved on the stack, to be restored at the end.",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "label",
        "content": "_start:",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "mov",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "ecx",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": ",",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "plain",
        "content": "DATAORG",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "inc",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "edx",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "pusha",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [],
    [
      {
        "type": "comment",
        "content": ";; At this point, the compiler and its compiled programs diverge.",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; Although every compiled program includes all the code in this file",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; above this point, only the three instructions directly above are",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; actually used by both. This point is where the compiler begins",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; storing the generated code, so only the compiler sees the",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; instructions below. This routine first modifies ecx to contain",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; TEXTORG, which is stored on the stack, and then offsets it to point",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; to filesize. edi is set equal to codebuf, and then the compiler",
        "skip": true
      }
    ],
    [
      {
        "type": "comment",
        "content": ";; enters the main loop.",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "label",
        "content": "codebuf:",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "mov",
        "wlength": 1
      },
      {
        "type": "space",
        "content": "  "
      },
      {
        "type": "register",
        "content": "ch",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": ",",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "plain",
        "content": "(TEXTORG",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "operator",
        "content": ">",
        "wlength": 2
      },
      {
        "type": "operator",
        "content": ">",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "number",
        "content": "8",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": ")",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "operator",
        "content": "&",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "number",
        "content": "0xFF",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "push",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "ecx",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "mov",
        "wlength": 1
      },
      {
        "type": "space",
        "content": "  "
      },
      {
        "type": "register",
        "content": "cl",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": ",",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "plain",
        "content": "filesize",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "operator",
        "content": "-",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "operator",
        "content": "$",
        "wlength": 2
      },
      {
        "type": "operator",
        "content": "$",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "lea",
        "wlength": 1
      },
      {
        "type": "space",
        "content": "  "
      },
      {
        "type": "register",
        "content": "edi",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": ",",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "operator",
        "content": "[",
        "wlength": 2
      },
      {
        "type": "plain",
        "content": "byte",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "register",
        "content": "ecx",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "operator",
        "content": "+",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "plain",
        "content": "codebuf",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "operator",
        "content": "-",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "plain",
        "content": "filesize",
        "wlength": 2
      },
      {
        "type": "operator",
        "content": "]",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [
      {
        "type": "space",
        "content": "\t",
        "skip": true
      },
      {
        "type": "plain",
        "content": "jmp",
        "wlength": 1
      },
      {
        "type": "space",
        "content": "  "
      },
      {
        "type": "plain",
        "content": "short",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "plain",
        "content": "relay",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ],
    [],
    [
      {
        "type": "comment",
        "content": ";; Here ends the file image.",
        "skip": true
      }
    ],
    [],
    [
      {
        "type": "plain",
        "content": "compilersize",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "plain",
        "content": "equ",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "operator",
        "content": "$",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "operator",
        "content": "-",
        "wlength": 1
      },
      {
        "type": "space",
        "content": " "
      },
      {
        "type": "operator",
        "content": "$",
        "wlength": 2
      },
      {
        "type": "operator",
        "content": "$",
        "wlength": 1
      },
      {
        "type": "newline",
        "content": "↵"
      }
    ]
  ]
}